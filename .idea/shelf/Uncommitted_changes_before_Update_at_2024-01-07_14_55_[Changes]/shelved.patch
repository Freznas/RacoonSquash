Index: app/src/main/java/com/example/racoonsquash/PongGameView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.racoonsquash\r\n\r\nimport android.content.Context\r\nimport android.graphics.Canvas\r\nimport android.graphics.Color\r\nimport android.graphics.Paint\r\nimport android.graphics.Path\r\nimport android.graphics.Rect\r\nimport android.graphics.Typeface\r\nimport android.util.Log\r\nimport android.view.SurfaceHolder\r\nimport android.view.SurfaceView\r\nimport kotlin.math.pow\r\nimport kotlin.math.sqrt\r\nimport kotlin.random.Random\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.widget.FrameLayout\r\nimport android.widget.ImageButton\r\n\r\nimport android.widget.Toast\r\nimport androidx.core.view.isInvisible\r\nimport androidx.core.view.isVisible\r\n\r\n\r\nclass PongGameView(context: Context, private val userName: String) : SurfaceView(context), SurfaceHolder.Callback, Runnable {\r\n    var thread: Thread? = null\r\n    var running = false\r\n    var lineColor: Paint\r\n    private var leftBoundaryPath: Path? = null\r\n    private var rightBoundaryPath: Path? = null\r\n    var touchColor: Paint\r\n    var scorePaint: Paint\r\n\r\n    var isGameOver = false\r\n    var isGameWon = false\r\n    lateinit var textGameWonPaint: Paint\r\n    private var textGameOverPaint: Paint\r\n\r\n    //    private var scorePlayerTop = 0\r\n//    private var scorePlayerBottom = 0\r\n    private val blockList: MutableList<BreakoutBlock> = mutableListOf()\r\n    private val xPositionList: MutableList<Float> = mutableListOf()\r\n    private val yPositionList: MutableList<Float> = mutableListOf()\r\n    lateinit var ballPong: BallPong\r\n    var bounds = Rect()\r\n    var mHolder: SurfaceHolder? = holder\r\n//    private val initialBallPosX = 500f\r\n//    private val initialBallPosY = 700f\r\n\r\n    private var score = 0\r\n    private lateinit var paddle: PaddlePong\r\n    private lateinit var topPaddle: PaddlePong\r\n    private val initialBallPosXForTop = 500f\r\n    private val initialBallPosYForTop = 1300f\r\n    private val initialBallPosXForBottom = 300f\r\n    private val initialBallPosYForBottom = 500f\r\n    private var lives = 1000 // Antal liv\r\n\r\n    // To adjust for marginTop to center the blocks (half of marginTop in function smallerSurfaceLayout)\r\n    private val marginOffset: Int = 75\r\n\r\n    private var isPaused = false\r\n\r\n    private val bounceSpeedXFactor = 10.0f  // Justera detta värde efter behov\r\n\r\n    private val soundEffect = SoundEffect(context)\r\n\r\n    init {\r\n        if (mHolder != null) {\r\n            mHolder?.addCallback(this)\r\n        }\r\n\r\n        lineColor = Paint().apply {\r\n            color = Color.CYAN\r\n            style = Paint.Style.STROKE\r\n            strokeWidth = 10f\r\n\r\n            scorePaint = Paint().apply {\r\n                color = Color.GREEN\r\n                alpha = 200\r\n                textSize = 60.0F\r\n                typeface = Typeface.create(\"serif-monospace\", Typeface.BOLD)\r\n            }\r\n            textGameOverPaint = Paint().apply {\r\n                color = Color.RED\r\n                alpha = 200\r\n                textSize = 60.0F\r\n                typeface = Typeface.create(\"serif-monospace\", Typeface.BOLD)\r\n            }\r\n            textGameWonPaint = Paint().apply {\r\n                color = Color.GREEN\r\n                alpha = 200\r\n                textSize = 60.0F\r\n                typeface = Typeface.create(\"serif-monospace\", Typeface.BOLD)\r\n            }\r\n\r\n            // Enbart för att synliggöra gränserna\r\n            lineColor = Paint().apply {\r\n                color = Color.MAGENTA\r\n                style = Paint.Style.STROKE\r\n                strokeWidth = 10f\r\n            }\r\n            touchColor = Paint().apply {\r\n                color = Color.RED\r\n                style = Paint.Style.STROKE\r\n                strokeWidth = 50f\r\n            }\r\n        }\r\n        setup()\r\n    }\r\n\r\n    private val screenWidth = resources.displayMetrics.widthPixels\r\n    private val screenHeight = resources.displayMetrics.heightPixels\r\n\r\n    private fun setup() {\r\n\r\n        ballPong = BallPong(context, 100f, 100f, 30f, 15f, 15f, 0)\r\n\r\n        paddle = PaddlePong(\r\n            context,\r\n            screenWidth / 2f,\r\n            screenHeight - 220f,  // for bottom paddle (Had to change for the smaller size) // JH\r\n            180f,\r\n            20f,\r\n            Color.parseColor(\"#FFFF00\")\r\n        )\r\n        topPaddle = PaddlePong(\r\n            context,\r\n            screenWidth / 2f,\r\n            50f,  // for top paddle\r\n            180f,\r\n            20f,\r\n            Color.parseColor(\"#FFFF00\")\r\n        )\r\n    }\r\n\r\n\r\n    fun setupButton(pauseButton: ImageButton, playButton: ImageButton) {\r\n        pauseButton.setOnClickListener {\r\n                isPaused = true\r\n                playButton.isVisible = true\r\n                pauseButton.isVisible = false\r\n\r\n        }\r\n\r\n        playButton.setOnClickListener {\r\n                isPaused = false\r\n                playButton.isVisible = false\r\n                pauseButton.isVisible = true\r\n\r\n        }\r\n    }\r\n\r\n    private fun smallerSurfaceLayout(width: Int, height: Int) {\r\n        val margin = 150\r\n        val layoutParams = FrameLayout.LayoutParams(\r\n            width,\r\n            height+margin // To adjust for surfaceView\r\n        )\r\n\r\n        layoutParams.topMargin = margin\r\n      \r\n        setLayoutParams(layoutParams)\r\n    }\r\n\r\n    override fun onTouchEvent(event: MotionEvent): Boolean {\r\n        when (event.action) {\r\n            MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {\r\n                // Move both paddles in sync based on the touch input\r\n                val newX = event.x\r\n                paddle.move(newX)\r\n                topPaddle.move(newX)\r\n\r\n                performClick()\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun performClick(): Boolean {\r\n        // Call the super implementation to handle the click event\r\n        super.performClick()\r\n        // Return true if the click event is handled\r\n        return true\r\n    }\r\n\r\n\r\n    fun start() {\r\n\r\n        running = true\r\n        thread = Thread(this) //en trad har en konstruktor som tar in en runnable,\r\n        // vilket sker i denna klass se rad 10\r\n        thread?.start()\r\n\r\n    }\r\n\r\n    fun stop() {\r\n        running = false\r\n        thread?.join()\r\n        try {\r\n            thread?.join() //join betyder att huvudtraden komemr vanta in att traden dor ut av sig sjalv\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n    private fun loseLife() {\r\n        lives--\r\n        if (lives <= 0) {\r\n            soundEffect.play(2)\r\n            isGameOver = true\r\n        }\r\n    }\r\n\r\n\r\n    fun update() {\r\n        checkWinCondition()\r\n        ballPong.update()\r\n        checkBallBlockCollision()\r\n        paddle.update()\r\n        topPaddle.update()\r\n        val screenHeight = height // Höjden på skärmen\r\n        if (lives <= 0) {\r\n            stop()\r\n        }\r\n\r\n\r\n        // Check collision with the bottom paddle\r\n        if (isBallCollidingWithPaddle(ballPong, paddle)) {\r\n            soundEffect.play(0)\r\n            handleBallPaddleCollision(ballPong, paddle)\r\n        }\r\n\r\n        // Check collision with the top paddle\r\n        if (isBallCollidingWithPaddle(ballPong, topPaddle)) {\r\n            soundEffect.play(0)\r\n            handleBallPaddleCollision(ballPong, topPaddle)\r\n        }\r\n\r\n\r\n        if (ballPong.ballPositionY < -ballPong.ballSize) {\r\n\r\n            loseLife()\r\n\r\n\r\n            resetBallPosition()\r\n\r\n        } else if (ballPong.ballPositionY > screenHeight + ballPong.ballSize) {\r\n\r\n            loseLife()\r\n            resetBallPosition()\r\n\r\n\r\n        } else if (ballPong.ballPositionX < 0) {\r\n//            scorePlayerBottom = 0\r\n//            scorePlayerTop = 0\r\n\r\n            score = 0\r\n\r\n        }\r\n        if (checkWinCondition() == true) {\r\n            isGameWon = true\r\n\r\n        }\r\n\r\n//        detta behöver vi om vi ska ha en maxpoäng (ändra bara 11an i if satsen till önskat maxpoäng)\r\n//        if (score >= 11) {\r\n//\r\n//            try {\r\n//                Thread.sleep(5000)\r\n//            } catch (e: InterruptedException) {\r\n//                e.printStackTrace()\r\n//            }\r\n//            score = 0\r\n//            scorePlayerBottom = 0\r\n//            scorePlayerTop = 0\r\n//    }\r\n        resetBallPosition()\r\n    }\r\n\r\n\r\n    private fun checkWinCondition(): Boolean {\r\n\r\n        return blockList.isEmpty()\r\n    }\r\n\r\n    private fun resetBallPosition() {\r\n        // Placera bollen på olika startpositioner beroende på var den åker ut\r\n\r\n        if (ballPong.ballPositionY < -ballPong.ballSize) {\r\n            Thread.sleep(0)\r\n            ballPong.ballPositionX = initialBallPosXForTop\r\n            ballPong.ballPositionY = initialBallPosYForTop\r\n        } else if (ballPong.ballPositionY > screenHeight - ballPong.ballSize) {\r\n            Thread.sleep(0)\r\n            ballPong.ballPositionX = initialBallPosXForBottom\r\n            ballPong.ballPositionY = initialBallPosYForBottom\r\n        }\r\n    }\r\n\r\n\r\n    override fun run() {\r\n        while (running) {\r\n            if (!isPaused) {\r\n                update()\r\n                drawGameBounds(holder)\r\n                ballPong.checkBounds(bounds)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun surfaceCreated(holder: SurfaceHolder) {\r\n        val blockWidth = 175f\r\n        val blockHeight = 50f\r\n        val centerX = (width / 2) - (blockWidth / 2)\r\n        val centerY = (height / 2) - marginOffset - (blockHeight / 2)\r\n        setup()\r\n\r\n        // Column positions\r\n        columnBlockPosition(centerX - 400f)\r\n        columnBlockPosition(centerX - 200f)\r\n        columnBlockPosition(centerX)\r\n        columnBlockPosition(centerX + 200f)\r\n        columnBlockPosition(centerX + 400f)\r\n\r\n        // Row positions\r\n        rowBlockPosition(centerY - 140f)\r\n        rowBlockPosition(centerY - 70f)\r\n        rowBlockPosition(centerY)\r\n        rowBlockPosition(centerY + 70f)\r\n        rowBlockPosition(centerY + 140f)\r\n\r\n        buildBreakoutBlocks()\r\n    }\r\n\r\n    override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {\r\n        leftBoundaryPath = createBoundaryPathLeft(width, height)\r\n        rightBoundaryPath = createBoundaryPathRight(width, height)\r\n        smallerSurfaceLayout(width, height)\r\n        bounds = Rect(0, 0, width, height)\r\n        start()\r\n\r\n    }\r\n\r\n    override fun surfaceDestroyed(holder: SurfaceHolder) {\r\n        stop()\r\n    }\r\n\r\n    private fun columnBlockPosition(xPosition: Float) {\r\n        xPositionList.add(xPosition)\r\n    }\r\n\r\n    private fun rowBlockPosition(yPosition: Float) {\r\n        yPositionList.add(yPosition)\r\n    }\r\n\r\n    private fun deleteBlockInList(block: BreakoutBlock): Boolean {\r\n\r\n        blockList.remove(block)\r\n        return blockList.isEmpty()\r\n    }\r\n\r\n    private fun addBlockInList(block: BreakoutBlock) {\r\n        blockList.add(block)\r\n    }\r\n\r\n\r\n    // Adding blocks in list in rows and columns\r\n    private fun buildBreakoutBlocks() {\r\n        var randomBitmap = Random.nextInt(0, 3)\r\n        val blockWidth = 175f\r\n        val blockHeight = 50f\r\n\r\n        for (y in yPositionList) {\r\n            for (x in xPositionList) {\r\n                addBlockInList(\r\n                    BreakoutBlock(\r\n                        this.context, x, y, x + blockWidth, y + blockHeight,\r\n                        randomBitmap\r\n                    )\r\n                )\r\n                randomBitmap = Random.nextInt(0, 3)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun checkBallBlockCollision() {\r\n        for (block in blockList) {\r\n            if (onBlockCollision(block, ballPong)) {\r\n                ballPong.ballSpeedY *= -1\r\n\r\n                score++\r\n\r\n                soundEffect.play(3)\r\n\r\n                isGameWon = deleteBlockInList(block)\r\n\r\n                break\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    private fun onBlockCollision(block: BreakoutBlock, ball: BallPong): Boolean {\r\n        // CommonX sparar bollens x-position om den befinner sig inom blockets x-position\r\n        val commonX = if (ball.ballPositionX < block.posX) {\r\n            block.posX\r\n        } else if (ball.ballPositionX > block.width) {\r\n            block.width\r\n        } else {\r\n            ball.ballPositionX\r\n        }\r\n\r\n        // CommonY sparar bollens y-position om den befinner sig inom blockets y-position\r\n        val commonY = if (ball.ballPositionY < block.posY) {\r\n            block.posY\r\n        } else if (ball.ballPositionY > block.height) {\r\n            block.height\r\n        } else {\r\n            ball.ballPositionY\r\n        }\r\n\r\n        // Här räknas distansen ut. Exempel, om bollens x-position är 50 och commonX\r\n        // är samma, dvs. 50 så blir x-distansens 0. Samma gäller för Y.\r\n        val distance =\r\n            sqrt(\r\n                (ball.ballPositionX - commonX).toDouble()\r\n                    .pow(2.0) + (ball.ballPositionY - commonY).toDouble()\r\n                    .pow(2.0)\r\n            )\r\n\r\n        // Returnerar true när distansen är 0 och drar bort bollens size.\r\n        return distance < ball.ballSize\r\n\r\n    }\r\n\r\n    fun drawGameBounds(holder: SurfaceHolder) {\r\n        val canvas: Canvas? = holder.lockCanvas()\r\n\r\n        canvas?.drawColor(Color.BLACK)\r\n\r\n        val livesText = \"Lives: $lives\"\r\n        canvas?.drawText(livesText, 20f, 100f, scorePaint)\r\n\r\n        rightBoundaryPath?.let {\r\n            if (isGameWon) {\r\n                canvas?.drawText(\r\n                    \"CONGRATZ\",\r\n                    canvas.width.toFloat() / 3,\r\n                    canvas.height.toFloat() - 300,\r\n                    textGameWonPaint\r\n                )\r\n\r\n//                    stop()\r\n            }\r\n\r\n            if (isGameOver)\r\n                canvas?.drawText(\r\n                    \"GAME OVER\",\r\n                    canvas.width.toFloat() / 3,\r\n                    canvas.height.toFloat() - 300,\r\n                    textGameOverPaint\r\n                )\r\n\r\n            canvas?.drawPath(it, lineColor)\r\n            if (ballPong.ballPositionY < 0 - ballPong.ballSize) {\r\n                canvas?.drawPath(it, touchColor)\r\n                canvas?.drawText(\r\n                    \"Score: $score\",\r\n                    canvas.width.toFloat() - 400,\r\n                    0f + 100,\r\n                    textGameOverPaint\r\n                )\r\n\r\n\r\n            } else {\r\n                // Placera text\r\n                canvas?.drawText(\r\n                    \"Score: $score\",\r\n                    canvas.width.toFloat() - 400,\r\n                    0f + 100,\r\n                    scorePaint\r\n                )\r\n            }\r\n            if (lives <= 0)\r\n                canvas?.drawText(\r\n                    \"GAME OVER\",\r\n                    canvas.width.toFloat() / 3,\r\n                    canvas.height.toFloat() - 300,\r\n                    textGameOverPaint\r\n                )\r\n\r\n        }\r\n\r\n        leftBoundaryPath?.let {\r\n            canvas?.drawPath(it, lineColor)\r\n        }\r\n\r\n        // Draw the paddles\r\n        paddle.draw(canvas!!)\r\n        topPaddle.draw(canvas)\r\n\r\n        //Draw all blocks\r\n        for (block in blockList) {\r\n            block.draw(canvas)\r\n        }\r\n\r\n\r\n        ballPong.draw(canvas)\r\n        holder.unlockCanvasAndPost(canvas)\r\n\r\n        if (isGameWon) {\r\n            stop()\r\n\r\n        }\r\n    }\r\n\r\n    private fun isBallCollidingWithPaddle(ball: BallPong, paddle: PaddlePong): Boolean {\r\n        // Check if the ball is within the horizontal bounds of the paddle\r\n        val horizontalCollision =\r\n            ball.ballPositionX + ball.ballSize > paddle.padPositionX - paddle.width / 2 &&\r\n                    ball.ballPositionX - ball.ballSize < paddle.padPositionX + paddle.width / 2\r\n\r\n        // Check if the ball is within the vertical bounds of the paddle\r\n        val verticalCollision =\r\n            ball.ballPositionY + ball.ballSize > paddle.padPositionY - paddle.height / 2 &&\r\n                    ball.ballPositionY - ball.ballSize < paddle.padPositionY + paddle.height / 2\r\n\r\n        return horizontalCollision && verticalCollision\r\n    }\r\n\r\n    private fun handleBallPaddleCollision(ball: BallPong, paddle: PaddlePong) {\r\n        // Invertera Y-hastigheten för att bollen ska studsa\r\n        ball.ballSpeedY = -ball.ballSpeedY\r\n\r\n        // Justera X-hastigheten baserat på träffpunkten på paddeln\r\n        val impactPoint = (ball.ballPositionX - paddle.padPositionX) / (paddle.width / 2)\r\n\r\n        ball.ballSpeedX = bounceSpeedXFactor * impactPoint\r\n    }\r\n\r\n    //     Enbart spelplan med linje för syns skull, vänster sidolinje.\r\n    private fun createBoundaryPathLeft(width: Int, height: Int): Path {\r\n        val pathLeft = Path()\r\n\r\n        pathLeft.moveTo(0f, 0f)\r\n        pathLeft.lineTo(0f, height.toFloat())\r\n\r\n        return pathLeft\r\n    }\r\n\r\n    // Enbart spelplan med linje för syns skull, höger sidolinje.\r\n    private fun createBoundaryPathRight(width: Int, height: Int): Path {\r\n        val pathRight = Path()\r\n\r\n        pathRight.moveTo(width.toFloat(), 0f)\r\n        pathRight.lineTo(width.toFloat(), height.toFloat())\r\n\r\n        return pathRight\r\n    }\r\n//    private fun updateScore(): Int {\r\n//        score++\r\n//        return score\r\n//    }\r\n//    private fun updateScoreTop(): Int {\r\n//        scorePlayerTop++\r\n//        return scorePlayerTop\r\n//    }\r\n//\r\n//    private fun updateScoreBottom(): Int {\r\n//        scorePlayerBottom++\r\n//        return scorePlayerBottom\r\n//    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/racoonsquash/PongGameView.kt b/app/src/main/java/com/example/racoonsquash/PongGameView.kt
--- a/app/src/main/java/com/example/racoonsquash/PongGameView.kt	(revision 38a4e3f791a6febc7876c67a6408d5b3fb68961b)
+++ b/app/src/main/java/com/example/racoonsquash/PongGameView.kt	(date 1704634751977)
@@ -1,5 +1,6 @@
 package com.example.racoonsquash
 
+import android.annotation.SuppressLint
 import android.content.Context
 import android.graphics.Canvas
 import android.graphics.Color
@@ -14,16 +15,15 @@
 import kotlin.math.sqrt
 import kotlin.random.Random
 import android.view.MotionEvent
-import android.view.View
 import android.widget.FrameLayout
 import android.widget.ImageButton
 
-import android.widget.Toast
-import androidx.core.view.isInvisible
 import androidx.core.view.isVisible
 
 
-class PongGameView(context: Context, private val userName: String) : SurfaceView(context), SurfaceHolder.Callback, Runnable {
+@SuppressLint("ViewConstructor")
+class PongGameView(context: Context, private val userName: String) : SurfaceView(context),
+    SurfaceHolder.Callback, Runnable {
     var thread: Thread? = null
     var running = false
     var lineColor: Paint
@@ -34,7 +34,7 @@
 
     var isGameOver = false
     var isGameWon = false
-    lateinit var textGameWonPaint: Paint
+    var textGameWonPaint: Paint
     private var textGameOverPaint: Paint
 
     //    private var scorePlayerTop = 0
@@ -55,7 +55,7 @@
     private val initialBallPosYForTop = 1300f
     private val initialBallPosXForBottom = 300f
     private val initialBallPosYForBottom = 500f
-    private var lives = 1000 // Antal liv
+    private var lives = 3 // Antal liv
 
     // To adjust for marginTop to center the blocks (half of marginTop in function smallerSurfaceLayout)
     private val marginOffset: Int = 75
@@ -138,16 +138,16 @@
 
     fun setupButton(pauseButton: ImageButton, playButton: ImageButton) {
         pauseButton.setOnClickListener {
-                isPaused = true
-                playButton.isVisible = true
-                pauseButton.isVisible = false
+            isPaused = true
+            playButton.isVisible = true
+            pauseButton.isVisible = false
 
         }
 
         playButton.setOnClickListener {
-                isPaused = false
-                playButton.isVisible = false
-                pauseButton.isVisible = true
+            isPaused = false
+            playButton.isVisible = false
+            pauseButton.isVisible = true
 
         }
     }
@@ -156,11 +156,11 @@
         val margin = 150
         val layoutParams = FrameLayout.LayoutParams(
             width,
-            height+margin // To adjust for surfaceView
+            height + margin // To adjust for surfaceView
         )
 
         layoutParams.topMargin = margin
-      
+
         setLayoutParams(layoutParams)
     }
 
@@ -215,7 +215,7 @@
     }
 
 
-    fun update() {
+    private fun update() {
         checkWinCondition()
         ballPong.update()
         checkBallBlockCollision()
@@ -242,41 +242,25 @@
 
         if (ballPong.ballPositionY < -ballPong.ballSize) {
 
-            loseLife()
-
 
             resetBallPosition()
 
         } else if (ballPong.ballPositionY > screenHeight + ballPong.ballSize) {
 
-            loseLife()
+
             resetBallPosition()
 
-
         } else if (ballPong.ballPositionX < 0) {
-//            scorePlayerBottom = 0
-//            scorePlayerTop = 0
+
 
             score = 0
 
         }
-        if (checkWinCondition() == true) {
+        if (checkWinCondition()) {
             isGameWon = true
 
         }
 
-//        detta behöver vi om vi ska ha en maxpoäng (ändra bara 11an i if satsen till önskat maxpoäng)
-//        if (score >= 11) {
-//
-//            try {
-//                Thread.sleep(5000)
-//            } catch (e: InterruptedException) {
-//                e.printStackTrace()
-//            }
-//            score = 0
-//            scorePlayerBottom = 0
-//            scorePlayerTop = 0
-//    }
         resetBallPosition()
     }
 
@@ -290,14 +274,17 @@
         // Placera bollen på olika startpositioner beroende på var den åker ut
 
         if (ballPong.ballPositionY < -ballPong.ballSize) {
+            loseLife()
             Thread.sleep(0)
             ballPong.ballPositionX = initialBallPosXForTop
             ballPong.ballPositionY = initialBallPosYForTop
-        } else if (ballPong.ballPositionY > screenHeight - ballPong.ballSize) {
-            Thread.sleep(0)
-            ballPong.ballPositionX = initialBallPosXForBottom
-            ballPong.ballPositionY = initialBallPosYForBottom
-        }
+        } else
+            if (ballPong.ballPositionY > screenHeight - ballPong.ballSize) {
+                loseLife()
+                Thread.sleep(0)
+                ballPong.ballPositionX = initialBallPosXForBottom
+                ballPong.ballPositionY = initialBallPosYForBottom
+            }
     }
 
 
@@ -563,6 +550,7 @@
 
         return pathRight
     }
+}
 //    private fun updateScore(): Int {
 //        score++
 //        return score
@@ -576,4 +564,3 @@
 //        scorePlayerBottom++
 //        return scorePlayerBottom
 //    }
-}
\ No newline at end of file
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetDropDown\">\r\n    <targetSelectedWithDropDown>\r\n      <Target>\r\n        <type value=\"QUICK_BOOT_TARGET\" />\r\n        <deviceKey>\r\n          <Key>\r\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\r\n            <value value=\"C:\\Users\\Joaki\\.android\\avd\\Pixel_2_API_34.avd\" />\r\n          </Key>\r\n        </deviceKey>\r\n      </Target>\r\n    </targetSelectedWithDropDown>\r\n    <timeTargetWasSelectedWithDropDown value=\"2024-01-04T13:23:21.730039200Z\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 38a4e3f791a6febc7876c67a6408d5b3fb68961b)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1704632092339)
@@ -7,11 +7,11 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\Joaki\.android\avd\Pixel_2_API_34.avd" />
+            <value value="C:\Users\Joaki\.android\avd\Pixel_3a_XL_API_34.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2024-01-04T13:23:21.730039200Z" />
+    <timeTargetWasSelectedWithDropDown value="2024-01-07T12:53:46.243880200Z" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/example/racoonsquash/PongActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.racoonsquash\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.widget.ImageButton\r\nimport com.example.racoonsquash.databinding.ActivityPongBinding\r\n\r\nclass PongActivity : AppCompatActivity() {\r\n\r\n    lateinit var binding: ActivityPongBinding\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityPongBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        val surfaceHolder = binding.svPong.holder\r\n        val gameView = intent.getStringExtra(\"userName\")?.let { PongGameView(this, it) }\r\n        val container = binding.root\r\n        container.addView(gameView)\r\n\r\n\r\n        val pauseButton: ImageButton = binding.btnPausePong\r\n        val playButton: ImageButton = binding.btnPlayPong\r\n        if (gameView != null) {\r\n            gameView.setupButton(pauseButton, playButton)\r\n        }\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/racoonsquash/PongActivity.kt b/app/src/main/java/com/example/racoonsquash/PongActivity.kt
--- a/app/src/main/java/com/example/racoonsquash/PongActivity.kt	(revision 38a4e3f791a6febc7876c67a6408d5b3fb68961b)
+++ b/app/src/main/java/com/example/racoonsquash/PongActivity.kt	(date 1704631699486)
@@ -14,7 +14,7 @@
         binding = ActivityPongBinding.inflate(layoutInflater)
         setContentView(binding.root)
 
-        val surfaceHolder = binding.svPong.holder
+        binding.svPong.holder
         val gameView = intent.getStringExtra("userName")?.let { PongGameView(this, it) }
         val container = binding.root
         container.addView(gameView)
