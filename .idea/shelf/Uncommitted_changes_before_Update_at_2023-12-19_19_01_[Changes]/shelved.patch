Index: app/src/main/java/com/example/racoonsquash/PongGameView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.racoonsquash\r\n\r\nimport android.content.Context\r\nimport android.graphics.Canvas\r\nimport android.graphics.Color\r\nimport android.graphics.Paint\r\nimport android.graphics.Path\r\nimport android.graphics.Rect\r\nimport android.graphics.Typeface\r\nimport android.view.SurfaceHolder\r\nimport android.view.SurfaceView\r\nimport kotlin.math.pow\r\nimport kotlin.math.sqrt\r\nimport kotlin.random.Random\r\nimport android.view.MotionEvent\r\n\r\nclass PongGameView(context: Context) : SurfaceView(context), SurfaceHolder.Callback, Runnable {\r\n    var thread: Thread? = null\r\n    var running = false\r\n    var lineColor: Paint\r\n    private var leftBoundaryPath: Path? = null\r\n    private var rightBoundaryPath: Path? = null\r\n    var touchColor: Paint\r\n    var scorePaint: Paint\r\n    private var textGameOverPaint: Paint\r\n    private var scorePlayerTop = 0\r\n    private var scorePlayerBottom = 0\r\n    private val blockList: MutableList<BreakoutBlock> = mutableListOf()\r\n    val xPositionList: MutableList<Float> = mutableListOf()\r\n    val yPositionList: MutableList<Float> = mutableListOf()\r\n    lateinit var ballPong: BallPong\r\n    var bounds = Rect()\r\n    var mHolder: SurfaceHolder? = holder\r\n    private val initialBallPosX = 500f\r\n    private val initialBallPosY = 700f\r\n    private lateinit var paddle: PaddlePong\r\n    private lateinit var topPaddle: PaddlePong\r\n\r\n    init {\r\n        if (mHolder != null) {\r\n            mHolder?.addCallback(this)\r\n        }\r\n\r\n        lineColor = Paint().apply {\r\n            color = Color.CYAN\r\n            style = Paint.Style.STROKE\r\n            strokeWidth = 10f\r\n\r\n            scorePaint = Paint().apply {\r\n                color = Color.GREEN\r\n                alpha = 200\r\n                textSize = 60.0F\r\n                typeface = Typeface.create(\"serif-monospace\", Typeface.BOLD)\r\n            }\r\n            textGameOverPaint = Paint().apply {\r\n                color = Color.RED\r\n                alpha = 200\r\n                textSize = 60.0F\r\n                typeface = Typeface.create(\"serif-monospace\", Typeface.BOLD)\r\n            }\r\n            // Enbart för att synliggöra gränserna\r\n            lineColor = Paint().apply {\r\n                color = Color.MAGENTA\r\n                style = Paint.Style.STROKE\r\n                strokeWidth = 10f\r\n            }\r\n            touchColor = Paint().apply {\r\n                color = Color.RED\r\n                style = Paint.Style.STROKE\r\n                strokeWidth = 50f\r\n            }\r\n        }\r\n        setup()\r\n    }\r\n\r\n    private val screenWidth = resources.displayMetrics.widthPixels\r\n    private val screenHeight = resources.displayMetrics.heightPixels\r\n\r\n    private fun setup() {\r\n        ballPong = CustomPongBall(context, 100f, 100f, 30f, 20f, 20f, 0)\r\n        paddle = PaddlePong(\r\n            context,\r\n            screenWidth / 2f,\r\n            screenHeight - 100f,  // for bottom paddle\r\n            180f,\r\n            20f,\r\n            Color.parseColor(\"#FFFF00\")\r\n        )\r\n        topPaddle = PaddlePong(\r\n            context,\r\n            screenWidth / 2f,\r\n            50f,  // for top paddle\r\n            180f,\r\n            20f,\r\n            Color.parseColor(\"#FFFF00\")\r\n        )\r\n    }\r\n\r\n    override fun onTouchEvent(event: MotionEvent): Boolean {\r\n        when (event.action) {\r\n            MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {\r\n                // Move both paddles in sync based on the touch input\r\n                val newX = event.x\r\n                paddle.move(newX)\r\n                topPaddle.move(newX)\r\n\r\n                performClick()\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    override fun performClick(): Boolean {\r\n        // Call the super implementation to handle the click event\r\n        super.performClick()\r\n        // Return true if the click event is handled\r\n        return true\r\n    }\r\n\r\n\r\n    fun start() {\r\n        running = true\r\n        thread = Thread(this) //en trad har en konstruktor som tar in en runnable,\r\n        // vilket sker i denna klass se rad 10\r\n        thread?.start()\r\n\r\n    }\r\n\r\n    fun stop() {\r\n        running = false\r\n        thread?.join()\r\n        try {\r\n            thread?.join() //join betyder att huvudtraden komemr vanta in att traden dor ut av sig sjalv\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    fun update() {\r\n        ballPong.update()\r\n        checkBlockBallCollision()\r\n        paddle.update()\r\n        topPaddle.update()\r\n        val screenHeight = height // Höjden på skärmen\r\n\r\n        // Check collision with the bottom paddle\r\n        if (isBallCollidingWithPaddle(ballPong, paddle)) {\r\n            ballPong.speedY = -ballPong.speedY // Reverse Y-direction\r\n        }\r\n\r\n        // Check collision with the top paddle\r\n        if (isBallCollidingWithPaddle(ballPong, topPaddle)) {\r\n            ballPong.speedY = -ballPong.speedY // Reverse Y-direction\r\n        }\r\n\r\n\r\n        if (ballPong.posY < -ballPong.size) {\r\n            updateScoreTop()\r\n            resetBallPosition()\r\n\r\n        } else if (ballPong.posY > screenHeight + ballPong.size) {\r\n            updateScoreBottom()\r\n            resetBallPosition()\r\n\r\n        } else if (ballPong.posX < 0) {\r\n            scorePlayerBottom = 0\r\n            scorePlayerTop = 0\r\n\r\n        }\r\n        if (scorePlayerBottom >= 11 || scorePlayerTop >= 11) {\r\n\r\n            try {\r\n                Thread.sleep(5000)\r\n            } catch (e: InterruptedException) {\r\n                e.printStackTrace()\r\n            }\r\n            scorePlayerBottom = 0\r\n            scorePlayerTop = 0\r\n            resetBallPosition()\r\n        }\r\n    }\r\n\r\n    private fun resetBallPosition() {\r\n        ballPong.posX = initialBallPosX\r\n        ballPong.posY = initialBallPosY\r\n    }\r\n\r\n\r\n    override fun run() {\r\n        while (running) {\r\n            update()\r\n            drawGameBounds(holder)\r\n            ballPong.checkBounds(bounds)\r\n\r\n        }\r\n    }\r\n\r\n\r\n    private fun columnBlockPlacement(xPosition: Float) {\r\n        xPositionList.add(xPosition)\r\n    }\r\n\r\n    private fun rowBlockPlacement(yPosition: Float) {\r\n        yPositionList.add(yPosition)\r\n\r\n    }\r\n\r\n    private fun addBlockInList(block: BreakoutBlock) {\r\n        blockList.add(block)\r\n    }\r\n\r\n    private fun deleteBlockInList(block: BreakoutBlock) {\r\n        blockList.remove(block)\r\n    }\r\n\r\n    // Adding blocks in list in rows and columns\r\n    private fun buildBreakoutBlocks() {\r\n        var randomBitmap = Random.nextInt(0, 3)\r\n        val blockWidth = 175f\r\n        val blockHeight = 50f\r\n\r\n        for (y in yPositionList) {\r\n            for (x in xPositionList) {\r\n                addBlockInList(\r\n                    BreakoutBlock(\r\n                        this.context, x, y, x + blockWidth, y + blockHeight,\r\n                        randomBitmap\r\n                    )\r\n                )\r\n                randomBitmap = Random.nextInt(0, 3)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun onBlockCollision(block: BreakoutBlock, ball: BallPong): Boolean {\r\n        // BlockX blir den närmsta punkten på breakout-blocket x/width mot bollens x-position\r\n        val blockX = if (ball.posX < block.posX) {\r\n            block.posX\r\n        } else if (ball.posX > block.width) {\r\n            block.width\r\n        } else {\r\n            ball.posX\r\n        }\r\n\r\n        // BlockY blir den näsrmsta punkten på breakout-blockets y/height mot bollens y-position\r\n        val blockY = if (ball.posY < block.posY) {\r\n            block.posY\r\n        } else if (ball.posY > block.height) {\r\n            block.height\r\n        } else {\r\n            ball.posY\r\n        }\r\n        // Räkna avståndet mellan bollens och blockets X och Y med pythagoras sats och dra bort bollens size.\r\n        val distance =\r\n            sqrt((ball.posX - blockX).toDouble().pow(2.0) + (ball.posY - blockY).toDouble().pow(2.0))\r\n\r\n        return distance < ball.size\r\n    }\r\n\r\n    private fun checkBlockBallCollision() {\r\n        for (block in blockList) {\r\n            if (onBlockCollision(block, ballPong)) {\r\n                ballPong.speedY *= -1\r\n                deleteBlockInList(block)\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun surfaceCreated(holder: SurfaceHolder) {\r\n        val blockWidth = 180f\r\n        val blockHeight = 50f\r\n        val centerX = (width / 2) - (blockWidth / 2)\r\n        val centerY = (height / 2) - (blockHeight / 2)\r\n        setup()\r\n\r\n        // Blocks column-placement\r\n        columnBlockPlacement(centerX - 400f)\r\n        columnBlockPlacement(centerX - 200f)\r\n        columnBlockPlacement(centerX)\r\n        columnBlockPlacement(centerX + 200f)\r\n        columnBlockPlacement(centerX + 400f)\r\n\r\n        // Blocks row-placement\r\n        rowBlockPlacement(centerY - 140f)\r\n        rowBlockPlacement(centerY - 70f)\r\n        rowBlockPlacement(centerY)\r\n        rowBlockPlacement(centerY + 70f)\r\n        rowBlockPlacement(centerY + 140f)\r\n\r\n        buildBreakoutBlocks()\r\n    }\r\n\r\n    override fun surfaceChanged(holder: SurfaceHolder, format: Int, width: Int, height: Int) {\r\n        leftBoundaryPath = createBoundaryPathLeft(width, height)\r\n        rightBoundaryPath = createBoundaryPathRight(width, height)\r\n        bounds = Rect(0, 0, width, height)\r\n        start()\r\n\r\n    }\r\n\r\n    override fun surfaceDestroyed(holder: SurfaceHolder) {\r\n        stop()\r\n    }\r\n\r\n    fun drawGameBounds(holder: SurfaceHolder) {\r\n        val canvas: Canvas? = holder.lockCanvas()\r\n\r\n        canvas?.drawColor(Color.BLACK)\r\n\r\n        rightBoundaryPath?.let {\r\n\r\n            canvas?.drawPath(it, lineColor)\r\n            if (ballPong.posY < 0 - ballPong.size) {\r\n                canvas?.drawPath(it, touchColor)\r\n                canvas?.drawText(\r\n                    \"Score: $scorePlayerBottom\",\r\n                    canvas.width.toFloat() - 400,\r\n                    0f + 100,\r\n                    textGameOverPaint\r\n                )\r\n\r\n\r\n            } else {\r\n                // Placera text\r\n                canvas?.drawText(\r\n                    \"Score: $scorePlayerBottom\",\r\n                    canvas.width.toFloat() - 400,\r\n                    0f + 100,\r\n                    scorePaint\r\n                )\r\n            }\r\n            if (scorePlayerBottom >= 10)\r\n                canvas?.drawText(\r\n                    \"GAME OVER\",\r\n                    canvas.width.toFloat() / 3,\r\n                    canvas.height.toFloat() - 300,\r\n                    textGameOverPaint\r\n                )\r\n        }\r\n\r\n        leftBoundaryPath?.let {\r\n            canvas?.drawPath(it, lineColor)\r\n            if (ballPong.posY < 0 - ballPong.size) {\r\n                canvas?.drawPath(it, touchColor)\r\n                canvas?.drawText(\r\n                    \"Score: $scorePlayerTop\",\r\n                    canvas.width.toFloat() - 400,\r\n                    0f + 200,\r\n                    textGameOverPaint\r\n                )\r\n\r\n            } else {\r\n                // Placera text\r\n                canvas?.drawText(\r\n                    \"Score: $scorePlayerTop\",\r\n                    canvas.width.toFloat() - 400,\r\n                    canvas.height -700f, // Såg ej text i emulator, så ändrade tillfälligt.\r\n                    scorePaint\r\n                )\r\n            }\r\n            if (scorePlayerTop >= 10)\r\n                canvas?.drawText(\r\n                    \"GAME OVER\",\r\n                    canvas.width.toFloat() / 3,\r\n                    canvas.height.toFloat() / 4,\r\n                    textGameOverPaint\r\n                )\r\n\r\n        }\r\n\r\n        // Draw the paddles\r\n        paddle.draw(canvas!!)\r\n        topPaddle.draw(canvas)\r\n\r\n        //Draw all blocks\r\n        for (block in blockList) {\r\n            block.draw(canvas)\r\n        }\r\n\r\n\r\n        ballPong.draw(canvas)\r\n        holder.unlockCanvasAndPost(canvas)\r\n    }\r\n\r\n    private fun isBallCollidingWithPaddle(ball: BallPong, paddle: PaddlePong): Boolean {\r\n        // Check if the ball is within the horizontal bounds of the paddle\r\n        val horizontalCollision = ball.posX + ball.size > paddle.positionX - paddle.width / 2 &&\r\n                ball.posX - ball.size < paddle.positionX + paddle.width / 2\r\n\r\n        // Check if the ball is within the vertical bounds of the paddle\r\n        val verticalCollision = ball.posY + ball.size > paddle.positionY - paddle.height / 2 &&\r\n                ball.posY - ball.size < paddle.positionY + paddle.height / 2\r\n\r\n        return horizontalCollision && verticalCollision\r\n    }\r\n\r\n    //     Enbart spelplan med linje för syns skull, vänster sidolinje.\r\n    private fun createBoundaryPathLeft(width: Int, height: Int): Path {\r\n        val pathLeft = Path()\r\n\r\n        pathLeft.moveTo(0f, 0f)\r\n        pathLeft.lineTo(0f, height.toFloat())\r\n\r\n        return pathLeft\r\n    }\r\n\r\n    // Enbart spelplan med linje för syns skull, höger sidolinje.\r\n    private fun createBoundaryPathRight(width: Int, height: Int): Path {\r\n        val pathRight = Path()\r\n\r\n        pathRight.moveTo(width.toFloat(), 0f)\r\n        pathRight.lineTo(width.toFloat(), height.toFloat())\r\n\r\n        return pathRight\r\n    }\r\n\r\n    private fun updateScoreTop(): Int {\r\n        scorePlayerTop++\r\n        return scorePlayerTop\r\n    }\r\n\r\n    private fun updateScoreBottom(): Int {\r\n        scorePlayerBottom++\r\n        return scorePlayerBottom\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/racoonsquash/PongGameView.kt b/app/src/main/java/com/example/racoonsquash/PongGameView.kt
--- a/app/src/main/java/com/example/racoonsquash/PongGameView.kt	(revision 5298bc084eb2bce3db638e2221ad6bead61a31c3)
+++ b/app/src/main/java/com/example/racoonsquash/PongGameView.kt	(date 1702985497056)
@@ -77,7 +77,7 @@
     private val screenHeight = resources.displayMetrics.heightPixels
 
     private fun setup() {
-        ballPong = CustomPongBall(context, 100f, 100f, 30f, 20f, 20f, 0)
+        ballPong = CustomPongBall(context, 100f, 100f, 30f, 10f, 10f, 0)
         paddle = PaddlePong(
             context,
             screenWidth / 2f,
